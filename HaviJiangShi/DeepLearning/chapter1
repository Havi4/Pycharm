import math
import numpy as np
# def basic_sigmoid(x):
#     """
#     and math package just compute numbers,it can't compute vector
#     this function we define the sigmoid that correct our y heat
#     compute sigmoid of X
#     :param x:
#     :return:
#     """
#
#     s = 1.0 / (1 + 1/math.exp(x))
#     return s
#
# print(basic_sigmoid(3))
#
# x = np.array([1,2,3])
# """
# np is compute vectors metrices every unit
# """
# print(np.exp(x))
#
# def sigmoid(x):
#     """
#     this is sigmoid function, it can calculate vector and matrices.
#     :param x: x can be numbers/matrices/vector
#     :return: computed numbers/matrices/vector
#     """
#     s = 1.0 / (1 + 1/np.exp(x))
#     return s
# print(sigmoid(x))
# # graded function
# def sigmoid_derivative_grade(x):
#     """
#     this function to define sigmoid grade function.ie sigmoid
#     s' = s(1-s)
#     :param x:
#     :return:
#     """
#     s = 1.0 / (1 + 1/np.exp(x))
#     ds = s * (1 - s)
#     return ds
#
# print(sigmoid_derivative_grade(x))
# x = x.reshape(3,1)
# print(np.shape(x))
#
# x2 = np.array([[[1,2,3],[2,3,4]],
#               [[7,9,9],[5,6,7]]])
# print(x2)
#
# def image2vector(imageX):
#     v = imageX.reshape(imageX.shape[0]*imageX.shape[1]*imageX.shape[2],1)
#     return v
#
# image = np.array([[[ 0.67826139,  0.29380381],
#         [ 0.90714982,  0.52835647],
#         [ 0.4215251 ,  0.45017551]],
#
#        [[ 0.92814219,  0.96677647],
#         [ 0.85304703,  0.52351845],
#         [ 0.19981397,  0.27417313]],
#
#        [[ 0.60659855,  0.00533165],
#         [ 0.10820313,  0.49978937],
#         [ 0.34144279,  0.94630077]]])
#
# print(image2vector(image))

def normallizeRows(X):
    x_norm = np.linalg.norm(X, axis=1, keepdims = True)
    print(x_norm)
    X = X / x_norm
    return X
x3 = np.array([
    [0,3,4],
    [1,6,4]
])

print(normallizeRows(x3))

def softmax(X):
    x_exp = np.exp(X)
    x_sum = np.sum(x_exp, axis=1, keepdims=True)
    s = x_exp/x_sum
    return s

x4 = np.array([
    [9,2,5,0,0],
    [7,5,0,0,0]
])

print(softmax(x4))